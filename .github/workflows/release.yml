name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ecom-web

jobs:
  # ==============================================================================
  # RELEASE BUILD JOB
  # ==============================================================================
  release-build:
    name: üöÄ Release Build
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          
      - name: üìã Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Release version: $VERSION"
          
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: üîç Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=raw,value=stable
            
      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: üèóÔ∏è Build and Push Release Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: üìä Security Scan Release Image
        run: |
          echo "üîí Running security scan on release image..."
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          
          # Scan release image
          RELEASE_IMAGE="${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          trivy image --format table --exit-code 0 $RELEASE_IMAGE

  # ==============================================================================
  # HELM PACKAGE JOB
  # ==============================================================================
  helm-package:
    name: üì¶ Helm Package
    runs-on: ubuntu-latest
    needs: [release-build]
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üéØ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'
          
      - name: üì¶ Update Chart Version
        run: |
          VERSION="${{ needs.release-build.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
          
          echo "üì¶ Updating Helm chart version to $VERSION_NUMBER"
          
          # Update Chart.yaml
          sed -i "s/^version:.*/version: $VERSION_NUMBER/" ecommerce-app/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"$VERSION_NUMBER\"/" ecommerce-app/Chart.yaml
          
          # Update image tag in values.yaml
          sed -i "s/tag:.*/tag: \"$VERSION_NUMBER\"/" ecommerce-app/values.yaml
          
      - name: üì¶ Package Helm Chart
        run: |
          echo "üì¶ Packaging Helm chart..."
          
          # Create releases directory if it doesn't exist
          mkdir -p releases
          
          # Package the chart
          helm package ecommerce-app/ --destination releases/
          
          # List packaged charts
          ls -la releases/
          
      - name: üì§ Upload Helm Chart
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ needs.release-build.outputs.version }}
          path: releases/*.tgz
          retention-days: 90

  # ==============================================================================
  # CREATE GITHUB RELEASE JOB
  # ==============================================================================
  github-release:
    name: üìù GitHub Release
    runs-on: ubuntu-latest
    needs: [release-build, helm-package]
    
    permissions:
      contents: write
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üì§ Download Helm Chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-${{ needs.release-build.outputs.version }}
          path: ./releases
          
      - name: üìù Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ needs.release-build.outputs.version }}"
          
          echo "Generating release notes for $VERSION"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## üöÄ What's New in $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "### üìã Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            
            # Get commit messages
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
          else
            echo "## üöÄ Initial Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "This is the initial release of the Kubernetes E-Commerce Deployment project." >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## üì¶ Release Assets" >> release_notes.md
          echo "" >> release_notes.md
          echo "### üê≥ Docker Images" >> release_notes.md
          echo "- \`${{ needs.release-build.outputs.image-tag }}\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### üéØ Helm Chart" >> release_notes.md
          echo "- Chart version: \`${VERSION#v}\`" >> release_notes.md
          echo "- Application version: \`${VERSION#v}\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## üìä Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Using kubectl" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "git clone https://github.com/${{ github.repository }}.git" >> release_notes.md
          echo "cd k8s-ecommerce-deployment" >> release_notes.md
          echo "git checkout $VERSION" >> release_notes.md
          echo "make deploy" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Using Helm" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "helm install ecommerce-app ./ecommerce-app/" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          
          cat release_notes.md
          
      - name: üè∑Ô∏è Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-build.outputs.version }}
          name: Release ${{ needs.release-build.outputs.version }}
          body_path: release_notes.md
          files: |
            releases/*.tgz
          draft: false
          prerelease: false
          make_latest: 'true'

  # ==============================================================================
  # PRODUCTION DEPLOYMENT JOB
  # ==============================================================================
  deploy-production:
    name: üåê Deploy to Production
    runs-on: ubuntu-latest
    needs: [release-build, github-release]
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app-url }}
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üéõÔ∏è Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: üîß Configure Production Kubernetes Context
        run: |
          echo "üîß Setting up production Kubernetes context..."
          mkdir -p ~/.kube
          echo "${{ secrets.PROD_KUBE_CONFIG }}" | base64 -d > ~/.kube/config || {
            echo "‚ö†Ô∏è  PROD_KUBE_CONFIG secret not set - deployment will be simulated"
            echo "Would deploy to production cluster with:"
            echo "- Release version: ${{ needs.release-build.outputs.version }}"
            echo "- Image: ${{ needs.release-build.outputs.image-tag }}"
          }
          
      - name: üöÄ Deploy Release to Production
        id: deploy
        run: |
          VERSION="${{ needs.release-build.outputs.version }}"
          IMAGE_TAG="${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${VERSION#v}"
          
          echo "üöÄ Deploying $VERSION to production..."
          echo "üì¶ Using image: $IMAGE_TAG"
          
          # Create production deployment manifests
          mkdir -p production-manifests
          cp k8s/*.yaml production-manifests/
          
          # Update image tag for production
          sed -i "s|image: .*ecom-web.*|image: $IMAGE_TAG|g" production-manifests/website-deployment.yaml
          
          # Add production labels
          sed -i '/metadata:/a \ \ labels:\n\ \ \ \ environment: "production"\n\ \ \ \ release-version: "'$VERSION'"' production-manifests/website-deployment.yaml
          
          # Simulate production deployment
          if kubectl cluster-info &>/dev/null; then
            echo "‚úÖ Production cluster accessible, deploying..."
            
            # Deploy to production namespace
            kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -
            
            # Apply manifests to production
            kubectl apply -f production-manifests/ -n production
            
            # Wait for deployment
            kubectl rollout status deployment/website-deployment -n production --timeout=600s
            
            # Get production URL
            PROD_URL=$(kubectl get service website-service -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "production-cluster")
            echo "app-url=https://$PROD_URL" >> $GITHUB_OUTPUT
            
            echo "‚úÖ Production deployment completed!"
          else
            echo "‚ö†Ô∏è  Production cluster not accessible - simulating deployment"
            echo "app-url=https://production.example.com" >> $GITHUB_OUTPUT
          fi
          
      - name: üìä Production Deployment Summary
        run: |
          echo "## üåê Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| üè∑Ô∏è Version | \`${{ needs.release-build.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| üê≥ Image | \`${{ needs.release-build.outputs.image-tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| üåê Environment | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| üîó URL | ${{ steps.deploy.outputs.app-url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è∞ Deployed | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
