name: PR Validation

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ecom-web

jobs:
  # ==============================================================================
  # LINT & VALIDATE JOB
  # ==============================================================================
  lint-and-validate:
    name: üîç Lint & Validate
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: üîç Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile
          failure-threshold: warning
          
      - name: üîç Validate YAML Files
        run: |
          echo "üîç Validating YAML syntax..."
          
          # Install yamllint
          pip install yamllint
          
          # Configure yamllint
          cat > .yamllint.yml << EOF
          extends: default
          rules:
            line-length:
              max: 120
            indentation:
              spaces: 2
            truthy:
              allowed-values: ['true', 'false', 'yes', 'no']
          EOF
          
          # Lint Kubernetes manifests
          yamllint k8s/ || echo "YAML lint completed with findings"
          
          # Lint Helm chart
          yamllint ecommerce-app/ || echo "Helm chart lint completed with findings"
          
      - name: üêò PHP Syntax Check
        run: |
          echo "üêò Checking PHP syntax..."
          
          # Install PHP
          sudo apt-get update
          sudo apt-get install -y php-cli
          
          # Check PHP syntax
          find learning-app-ecommerce -name "*.php" -exec php -l {} \; | grep -E "(Errors|Parse error)" && exit 1 || echo "‚úÖ PHP syntax check passed"
          
      - name: üéØ Helm Chart Validation
        run: |
          echo "üéØ Validating Helm chart..."
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Lint Helm chart
          helm lint ecommerce-app/
          
          # Validate template rendering
          helm template test-release ecommerce-app/ > /tmp/helm-rendered.yaml
          
          echo "‚úÖ Helm chart validation completed"

  # ==============================================================================
  # SECURITY SCAN JOB
  # ==============================================================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: üîí Dockerfile Security Scan
        run: |
          echo "üîí Scanning Dockerfile for security issues..."
          
          # Check for common security issues
          echo "Checking for root user usage..."
          if grep -q "USER root" docker/Dockerfile; then
            echo "‚ö†Ô∏è  Warning: Root user detected in Dockerfile"
          fi
          
          echo "Checking for latest tag usage..."
          if grep -q ":latest" docker/Dockerfile; then
            echo "‚ö†Ô∏è  Warning: 'latest' tag usage detected"
          fi
          
          echo "‚úÖ Basic security scan completed"
          
      - name: üîç Secret Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ==============================================================================
  # BUILD TEST JOB
  # ==============================================================================
  build-test:
    name: üî® Build Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: üèóÔ∏è Test Docker Build
        uses: docker/build-push-action@v5
        with:
          context: ../
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: false
          tags: test-build:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==============================================================================
  # KUBERNETES DRY RUN JOB
  # ==============================================================================
  k8s-dry-run:
    name: üéØ K8s Dry Run
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üéõÔ∏è Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: üîç Kubernetes Dry Run
        run: |
          echo "üîç Performing Kubernetes dry run..."
          
          # Validate all manifests
          for file in k8s/*.yaml; do
            if [[ -f "$file" && -s "$file" ]]; then
              echo "Validating $file"
              kubectl apply --dry-run=client -f "$file"
            fi
          done
          
          echo "‚úÖ Kubernetes dry run completed successfully"

  # ==============================================================================
  # PR SUMMARY JOB
  # ==============================================================================
  pr-summary:
    name: üìã PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan, build-test, k8s-dry-run]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: üìã Generate PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const jobs = [
              { name: 'Lint & Validate', status: '${{ needs.lint-and-validate.result }}' },
              { name: 'Security Scan', status: '${{ needs.security-scan.result }}' },
              { name: 'Build Test', status: '${{ needs.build-test.result }}' },
              { name: 'K8s Dry Run', status: '${{ needs.k8s-dry-run.result }}' }
            ];
            
            const statusIcon = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ùì';
              }
            };
            
            let summary = `## üîç PR Validation Summary\n\n`;
            summary += `| Check | Status | Result |\n`;
            summary += `|-------|--------|--------|\n`;
            
            jobs.forEach(job => {
              summary += `| ${job.name} | ${statusIcon(job.status)} | ${job.status} |\n`;
            });
            
            summary += `\n### üìä Details\n`;
            summary += `- **PR**: #${context.issue.number} - ${pr.title}\n`;
            summary += `- **Author**: @${pr.user.login}\n`;
            summary += `- **Branch**: \`${pr.head.ref}\`\n`;
            summary += `- **Commit**: \`${pr.head.sha.substring(0, 7)}\`\n`;
            
            const allPassed = jobs.every(job => job.status === 'success');
            if (allPassed) {
              summary += `\n‚úÖ **All checks passed!** This PR is ready for review.\n`;
            } else {
              summary += `\n‚ö†Ô∏è **Some checks failed.** Please review and fix the issues before merging.\n`;
            }
            
            // Update the PR description or create a comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
