1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.webapp.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "ecommerce-app.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.webapp.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "ecommerce-app.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "ecommerce-app.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.webapp.service.port }}
{{- else if contains "ClusterIP" .Values.webapp.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "ecommerce-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the status of your deployment:
   kubectl get pods -l app.kubernetes.io/name={{ include "ecommerce-app.name" . }}

3. View application logs:
   kubectl logs -l app.kubernetes.io/name={{ include "ecommerce-app.name" . }} -f

4. Access MySQL database:
   kubectl exec -it deployment/{{ include "ecommerce-app.fullname" . }}-mysql -- mysql -u{{ .Values.mysql.auth.username }} -p{{ .Values.mysql.auth.password }} {{ .Values.mysql.auth.database }}

5. Monitor storage usage:
   kubectl get pvc
   kubectl describe pvc {{ include "ecommerce-app.fullname" . }}-mysql-pvc

{{- if .Values.autoscaling.enabled }}
6. Check Horizontal Pod Autoscaler status:
   kubectl get hpa {{ include "ecommerce-app.fullname" . }}
{{- end }}

ðŸŽ‰ Your E-Commerce application has been successfully deployed!

Features included:
- âœ… PHP/Apache web application ({{ .Values.webapp.replicaCount }} replicas)
{{- if .Values.mysql.enabled }}
- âœ… MySQL database with persistent storage ({{ .Values.mysql.persistence.size }})
{{- end }}
- âœ… Configuration management (Secrets & ConfigMaps)
{{- if .Values.webapp.healthProbes.enabled }}
- âœ… Health monitoring (startup, liveness, readiness probes)
{{- end }}
{{- if .Values.autoscaling.enabled }}
- âœ… Auto-scaling ({{ .Values.autoscaling.minReplicas }}-{{ .Values.autoscaling.maxReplicas }} replicas, {{ .Values.autoscaling.targetCPUUtilizationPercentage }}% CPU)
{{- end }}
- âœ… Security contexts and best practices
- âœ… Resource limits and requests

For more information, visit the Chart repository or check the documentation.
