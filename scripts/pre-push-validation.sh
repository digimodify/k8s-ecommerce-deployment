#!/bin/bash

# Pre-Push Validation Script
# Validates project before GitHub deployment

set -e

echo "üîç Pre-Push Validation Started..."
echo "=================================="

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check basic tools
echo "üìã Checking required tools..."
MISSING_TOOLS=()

if ! command_exists docker; then
    MISSING_TOOLS+=("docker")
fi

if ! command_exists git; then
    MISSING_TOOLS+=("git")
fi

if [ ${#MISSING_TOOLS[@]} -gt 0 ]; then
    echo "‚ùå Missing required tools: ${MISSING_TOOLS[*]}"
    echo "Please install these tools before proceeding."
    exit 1
fi

echo "‚úÖ Required tools are available"

# Validate YAML syntax
echo "üìù Validating YAML files..."
YAML_ERRORS=0

for file in .github/workflows/*.yml k8s/*.yaml ecommerce-app/*.yaml; do
    if [ -f "$file" ]; then
        if command_exists python3; then
            python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null || {
                echo "‚ùå YAML syntax error in: $file"
                YAML_ERRORS=$((YAML_ERRORS + 1))
            }
        else
            echo "‚ö†Ô∏è Python3 not available, skipping YAML validation"
            break
        fi
    fi
done

if [ $YAML_ERRORS -gt 0 ]; then
    echo "‚ùå Found $YAML_ERRORS YAML syntax errors"
    exit 1
fi

echo "‚úÖ All YAML files have valid syntax"

# Check Docker configuration
echo "üê≥ Validating Docker configuration..."

if [ -z "$DOCKER_HUB_USERNAME" ]; then
    echo "‚ö†Ô∏è DOCKER_HUB_USERNAME not set - will use placeholder"
    export DOCKER_HUB_USERNAME="your-docker-username"
fi

# Test Docker build (dry run)
echo "üî® Testing Docker build configuration..."
if docker info >/dev/null 2>&1; then
    if [ -f "docker/Dockerfile" ]; then
        # Test Dockerfile syntax without actually building
        docker build -f docker/Dockerfile -t test-build:validation . --dry-run 2>/dev/null || {
            # Fallback: just check if Dockerfile exists and has basic structure
            if grep -q "FROM" docker/Dockerfile && grep -q "COPY\|ADD" docker/Dockerfile; then
                echo "‚úÖ Dockerfile structure appears valid"
            else
                echo "‚ùå Dockerfile missing required instructions (FROM, COPY/ADD)"
                exit 1
            fi
        }
        echo "‚úÖ Docker build configuration is valid"
    else
        echo "‚ùå Dockerfile not found at docker/Dockerfile"
        exit 1
    fi
else
    echo "‚ö†Ô∏è Docker daemon not running - checking Dockerfile syntax only"
    if [ -f "docker/Dockerfile" ]; then
        if grep -q "FROM" docker/Dockerfile; then
            echo "‚úÖ Dockerfile syntax appears valid"
        else
            echo "‚ùå Dockerfile missing FROM instruction"
            exit 1
        fi
    fi
fi

# Check Git status
echo "üìä Checking Git status..."
if [ -d .git ]; then
    if [ -n "$(git status --porcelain)" ]; then
        echo "‚ö†Ô∏è You have uncommitted changes:"
        git status --short
        echo ""
        echo "Consider committing these changes before pushing."
    else
        echo "‚úÖ All changes are committed"
    fi
else
    echo "‚ùå Not a Git repository"
    exit 1
fi

# Run security gates
echo "üîí Running security validation..."
if [ -f ".github/scripts/security-gates.sh" ]; then
    ./.github/scripts/security-gates.sh || {
        echo "‚ùå Security gates failed"
        exit 1
    }
else
    echo "‚ö†Ô∏è Security gates script not found"
fi

# Validate secrets documentation
echo "üìã Checking secrets documentation..."
if [ -f ".github/docs/SECRETS.md" ]; then
    echo "‚úÖ Secrets documentation exists"
else
    echo "‚ö†Ô∏è Secrets documentation missing"
fi

# Check GitHub Actions workflow files
echo "üîÑ Validating GitHub Actions workflows..."
WORKFLOW_ERRORS=0

for workflow in .github/workflows/*.yml; do
    if [ -f "$workflow" ]; then
        # Basic workflow validation
        if ! grep -q "name:" "$workflow"; then
            echo "‚ùå Workflow missing name: $(basename $workflow)"
            WORKFLOW_ERRORS=$((WORKFLOW_ERRORS + 1))
        fi
        
        if ! grep -q "on:" "$workflow"; then
            echo "‚ùå Workflow missing triggers: $(basename $workflow)"
            WORKFLOW_ERRORS=$((WORKFLOW_ERRORS + 1))
        fi
    fi
done

if [ $WORKFLOW_ERRORS -gt 0 ]; then
    echo "‚ùå Found $WORKFLOW_ERRORS workflow validation errors"
    exit 1
fi

echo "‚úÖ GitHub Actions workflows are valid"

# Final summary
echo ""
echo "üéâ Pre-Push Validation Summary"
echo "=============================="
echo "‚úÖ YAML syntax validation passed"
echo "‚úÖ Docker configuration validated"
echo "‚úÖ Git repository status checked"
echo "‚úÖ Security gates completed"
echo "‚úÖ GitHub Actions workflows validated"
echo ""
echo "üöÄ Project is ready for GitHub deployment!"
echo ""
echo "Next steps:"
echo "1. Create GitHub repository"
echo "2. Configure repository secrets:"
echo "   - DOCKER_HUB_USERNAME"
echo "   - DOCKER_HUB_ACCESS_TOKEN"
echo "   - KUBE_CONFIG_DATA"
echo "3. Push to GitHub:"
echo "   git remote add origin https://github.com/YOUR_USERNAME/k8s-ecommerce-deployment.git"
echo "   git push -u origin main"
